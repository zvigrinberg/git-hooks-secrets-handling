#!/bin/bash
PREVIOUS_REF="$1"
NEW_REF="$2"
BRANCH_CHECKOUT="$3"

if [[ "${BRANCH_CHECKOUT}" == "1" ]]; then
    echo "moving from branch $PREVIOUS_REF to branch $NEW_REF", and decrypting all yaml, json and env files in new branch that are encrypted.

else    
    exit 0
fi


git notes remove $NEW_REF
FILES_LIST=$(git ls-tree -r $NEW_REF | awk '{print $4}' | grep -E '.env|.yaml|.json')
for file in $FILES_LIST
do
     echo "Processing file -> '$file'"
	if [[ "${file}" == *".json"* ]]; then
		ALREADY_ENCRYPTED=$(cat $file | jq .sops.pgp 2>&1  )

		if [[ "${ALREADY_ENCRYPTED}" != "null" ]] && [[ ! "${ALREADY_ENCRYPTED}" == *"error"* ]] && [[ ! "${ALREADY_ENCRYPTED}" == *"Error"* ]] && [[ ! "${ALREADY_ENCRYPTED}" == *"ERROR"* ]] ; then
      echo "decrypting $file"
			sops --in-place --decrypt  "$file"
			cat "$file" | jq . | tee "$file" >/dev/null
      echo "successfully decrypted $file"
      git notes append $NEW_REF -m "$file"
		fi
	fi

	if [[ "${file}" == *".yaml"* ]]; then
		ALREADY_ENCRYPTED=$(cat $file | yq .sops.pgp 2>&1 )

		if [[ "${ALREADY_ENCRYPTED}" != "null" ]] && [[ ! "${ALREADY_ENCRYPTED}" == *"error"* ]] && [[ ! "${ALREADY_ENCRYPTED}" == *"Error"* ]] && [[ ! "${ALREADY_ENCRYPTED}" == *"ERROR"* ]]   ; then
            echo "decrypting $file" 
			sops --in-place --decrypt  "$file"
			cat "$file" | yq . | tee "$file" >/dev/null
            echo "successfully decrypted $file"
            git notes append $NEW_REF -m "$file"
		fi
	fi

	if [[ "${file}" == *".env"* ]]; then
		ALREADY_ENCRYPTED=$(cat $file | grep "sops_version=")    
        
		if [[ -n "${ALREADY_ENCRYPTED}"  ]] ; then
            echo "decrypting $file"
			sops --in-place --decrypt  "$file"
            echo "successfully decrypted $file"
            git notes append $NEW_REF -m "$file"
		fi
	fi


    
done
